package iso20022

// Set of characteristics that apply to the debit side of the payment transactions included in the credit transfer transaction initiation.
type PaymentInstructionInformation1 struct {

	// Reference assigned by a sending party to unambiguously identify the payment information block within the message.
	PaymentInformationIdentification *Max35Text `xml:"PmtInfId,omitempty"`

	// Specifies the means of payment that will be used to move the amount of money.
	PaymentMethod *PaymentMethod3Code `xml:"PmtMtd"`

	// Set of elements used to further specify the type of transaction.
	PaymentTypeInformation *PaymentTypeInformation1 `xml:"PmtTpInf,omitempty"`

	// Date at which the initiating party requests the clearing agent to process the payment. If payment by cheque, the date when the cheque must be generated by the bank.
	//
	// Usage: This is the date on which the debtor's account(s) is (are) to be debited.
	RequestedExecutionDate *ISODate `xml:"ReqdExctnDt"`

	// Date used for the correction of the value date of a cash pool movement that has been posted with a different value date.
	PoolingAdjustmentDate *ISODate `xml:"PoolgAdjstmntDt,omitempty"`

	// Party that owes an amount of money to the (ultimate) creditor.
	Debtor *PartyIdentification8 `xml:"Dbtr"`

	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *CashAccount7 `xml:"DbtrAcct"`

	// Financial institution servicing an account for the debtor.
	DebtorAgent *BranchAndFinancialInstitutionIdentification3 `xml:"DbtrAgt"`

	// Unambiguous identification of the account of the debtor agent at its servicing agent in the payment chain.
	DebtorAgentAccount *CashAccount7 `xml:"DbtrAgtAcct,omitempty"`

	// Ultimate party that owes an amount of money to the (ultimate) creditor.
	UltimateDebtor *PartyIdentification8 `xml:"UltmtDbtr,omitempty"`

	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer *ChargeBearerType1Code `xml:"ChrgBr,omitempty"`

	// Account used to process charges associated with a transaction.
	//
	// Usage : charges account should be used when charges have to be booked to an account different from the account identified in debtor's account.
	ChargesAccount *CashAccount7 `xml:"ChrgsAcct,omitempty"`

	// Agent that services a charges account.
	//
	// Usage : charges account agent should only be used when the charges account agent is different from the debtor agent.
	ChargesAccountAgent *BranchAndFinancialInstitutionIdentification3 `xml:"ChrgsAcctAgt,omitempty"`

	// Set of elements providing information specific to the individual transaction(s) included in the message.
	CreditTransferTransactionInformation []*CreditTransferTransactionInformation1 `xml:"CdtTrfTxInf"`
}

func (p *PaymentInstructionInformation1) SetPaymentInformationIdentification(value string) {
	p.PaymentInformationIdentification = (*Max35Text)(&value)
}

func (p *PaymentInstructionInformation1) SetPaymentMethod(value string) {
	p.PaymentMethod = (*PaymentMethod3Code)(&value)
}

func (p *PaymentInstructionInformation1) AddPaymentTypeInformation() *PaymentTypeInformation1 {
	p.PaymentTypeInformation = new(PaymentTypeInformation1)
	return p.PaymentTypeInformation
}

func (p *PaymentInstructionInformation1) SetRequestedExecutionDate(value string) {
	p.RequestedExecutionDate = (*ISODate)(&value)
}

func (p *PaymentInstructionInformation1) SetPoolingAdjustmentDate(value string) {
	p.PoolingAdjustmentDate = (*ISODate)(&value)
}

func (p *PaymentInstructionInformation1) AddDebtor() *PartyIdentification8 {
	p.Debtor = new(PartyIdentification8)
	return p.Debtor
}

func (p *PaymentInstructionInformation1) AddDebtorAccount() *CashAccount7 {
	p.DebtorAccount = new(CashAccount7)
	return p.DebtorAccount
}

func (p *PaymentInstructionInformation1) AddDebtorAgent() *BranchAndFinancialInstitutionIdentification3 {
	p.DebtorAgent = new(BranchAndFinancialInstitutionIdentification3)
	return p.DebtorAgent
}

func (p *PaymentInstructionInformation1) AddDebtorAgentAccount() *CashAccount7 {
	p.DebtorAgentAccount = new(CashAccount7)
	return p.DebtorAgentAccount
}

func (p *PaymentInstructionInformation1) AddUltimateDebtor() *PartyIdentification8 {
	p.UltimateDebtor = new(PartyIdentification8)
	return p.UltimateDebtor
}

func (p *PaymentInstructionInformation1) SetChargeBearer(value string) {
	p.ChargeBearer = (*ChargeBearerType1Code)(&value)
}

func (p *PaymentInstructionInformation1) AddChargesAccount() *CashAccount7 {
	p.ChargesAccount = new(CashAccount7)
	return p.ChargesAccount
}

func (p *PaymentInstructionInformation1) AddChargesAccountAgent() *BranchAndFinancialInstitutionIdentification3 {
	p.ChargesAccountAgent = new(BranchAndFinancialInstitutionIdentification3)
	return p.ChargesAccountAgent
}

func (p *PaymentInstructionInformation1) AddCreditTransferTransactionInformation() *CreditTransferTransactionInformation1 {
	newValue := new(CreditTransferTransactionInformation1)
	p.CreditTransferTransactionInformation = append(p.CreditTransferTransactionInformation, newValue)
	return newValue
}

// Set of characteristics that apply to the credit side of the payment transactions included in the direct debit transaction initiation.
type PaymentInstructionInformation2 struct {

	// Reference assigned by a sending party to unambiguously identify the payment information block within the message.
	PaymentInformationIdentification *Max35Text `xml:"PmtInfId,omitempty"`

	// Specifies the means of payment that will be used to move the amount of money.
	PaymentMethod *PaymentMethod2Code `xml:"PmtMtd"`

	// Set of elements used to further specify the type of transaction.
	PaymentTypeInformation *PaymentTypeInformation2 `xml:"PmtTpInf,omitempty"`

	// Date at which the creditor requests the amount of money to be collected from the debtor.
	RequestedCollectionDate *ISODate `xml:"ReqdColltnDt"`

	// Party to which an amount of money is due.
	Creditor *PartyIdentification8 `xml:"Cdtr"`

	// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
	CreditorAccount *CashAccount7 `xml:"CdtrAcct"`

	// Financial institution servicing an account for the creditor.
	CreditorAgent *BranchAndFinancialInstitutionIdentification3 `xml:"CdtrAgt"`

	// Unambiguous identification of the account of the creditor agent at its servicing agent to which a credit entry will be made as a result of the payment transaction.
	CreditorAgentAccount *CashAccount7 `xml:"CdtrAgtAcct,omitempty"`

	// Ultimate party to which an amount of money is due.
	UltimateCreditor *PartyIdentification8 `xml:"UltmtCdtr,omitempty"`

	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer *ChargeBearerType1Code `xml:"ChrgBr,omitempty"`

	// Account used to process charges associated with a transaction.
	//
	// Usage : charges account should be used when charges have to be booked to an account different from the account identified in debtor's account.
	ChargesAccount *CashAccount7 `xml:"ChrgsAcct,omitempty"`

	// Agent that services a charges account.
	//
	// Usage : charges account agent should only be used when the charges account agent is different from the creditor agent.
	ChargesAccountAgent *BranchAndFinancialInstitutionIdentification3 `xml:"ChrgsAcctAgt,omitempty"`

	// Set of elements providing information specific to the individual transaction(s) included in the message.
	DirectDebitTransactionInformation []*DirectDebitTransactionInformation1 `xml:"DrctDbtTxInf"`
}

func (p *PaymentInstructionInformation2) SetPaymentInformationIdentification(value string) {
	p.PaymentInformationIdentification = (*Max35Text)(&value)
}

func (p *PaymentInstructionInformation2) SetPaymentMethod(value string) {
	p.PaymentMethod = (*PaymentMethod2Code)(&value)
}

func (p *PaymentInstructionInformation2) AddPaymentTypeInformation() *PaymentTypeInformation2 {
	p.PaymentTypeInformation = new(PaymentTypeInformation2)
	return p.PaymentTypeInformation
}

func (p *PaymentInstructionInformation2) SetRequestedCollectionDate(value string) {
	p.RequestedCollectionDate = (*ISODate)(&value)
}

func (p *PaymentInstructionInformation2) AddCreditor() *PartyIdentification8 {
	p.Creditor = new(PartyIdentification8)
	return p.Creditor
}

func (p *PaymentInstructionInformation2) AddCreditorAccount() *CashAccount7 {
	p.CreditorAccount = new(CashAccount7)
	return p.CreditorAccount
}

func (p *PaymentInstructionInformation2) AddCreditorAgent() *BranchAndFinancialInstitutionIdentification3 {
	p.CreditorAgent = new(BranchAndFinancialInstitutionIdentification3)
	return p.CreditorAgent
}

func (p *PaymentInstructionInformation2) AddCreditorAgentAccount() *CashAccount7 {
	p.CreditorAgentAccount = new(CashAccount7)
	return p.CreditorAgentAccount
}

func (p *PaymentInstructionInformation2) AddUltimateCreditor() *PartyIdentification8 {
	p.UltimateCreditor = new(PartyIdentification8)
	return p.UltimateCreditor
}

func (p *PaymentInstructionInformation2) SetChargeBearer(value string) {
	p.ChargeBearer = (*ChargeBearerType1Code)(&value)
}

func (p *PaymentInstructionInformation2) AddChargesAccount() *CashAccount7 {
	p.ChargesAccount = new(CashAccount7)
	return p.ChargesAccount
}

func (p *PaymentInstructionInformation2) AddChargesAccountAgent() *BranchAndFinancialInstitutionIdentification3 {
	p.ChargesAccountAgent = new(BranchAndFinancialInstitutionIdentification3)
	return p.ChargesAccountAgent
}

func (p *PaymentInstructionInformation2) AddDirectDebitTransactionInformation() *DirectDebitTransactionInformation1 {
	newValue := new(DirectDebitTransactionInformation1)
	p.DirectDebitTransactionInformation = append(p.DirectDebitTransactionInformation, newValue)
	return newValue
}

// Set of characteristics that apply to the debit side of the payment transactions included in the credit transfer initiation.
type PaymentInstructionInformation3 struct {

	// Unique identification, as assigned by a sending party, to unambiguously identify the payment information group within the message.
	PaymentInformationIdentification *Max35Text `xml:"PmtInfId"`

	// Specifies the means of payment that will be used to move the amount of money.
	PaymentMethod *PaymentMethod3Code `xml:"PmtMtd"`

	// Identifies whether a single entry per individual transaction or a batch entry for the sum of the amounts of all transactions within the group of a message is requested.
	// Usage: Batch booking is used to request and not order a possible batch booking.
	BatchBooking *BatchBookingIndicator `xml:"BtchBookg,omitempty"`

	// Number of individual transactions contained in the paymnet information group.
	NumberOfTransactions *Max15NumericText `xml:"NbOfTxs,omitempty"`

	// Total of all individual amounts included in the group, irrespective of currencies.
	ControlSum *DecimalNumber `xml:"CtrlSum,omitempty"`

	// Set of elements used to further specify the type of transaction.
	PaymentTypeInformation *PaymentTypeInformation19 `xml:"PmtTpInf,omitempty"`

	// Date at which the initiating party requests the clearing agent to process the payment.
	// Usage: This is the date on which the debtor's account is to be debited. If payment by cheque, the date when the cheque must be generated by the bank.
	RequestedExecutionDate *ISODate `xml:"ReqdExctnDt"`

	// Date used for the correction of the value date of a cash pool movement that has been posted with a different value date.
	PoolingAdjustmentDate *ISODate `xml:"PoolgAdjstmntDt,omitempty"`

	// Party that owes an amount of money to the (ultimate) creditor.
	Debtor *PartyIdentification32 `xml:"Dbtr"`

	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *CashAccount16 `xml:"DbtrAcct"`

	// Financial institution servicing an account for the debtor.
	DebtorAgent *BranchAndFinancialInstitutionIdentification4 `xml:"DbtrAgt"`

	// Unambiguous identification of the account of the debtor agent at its servicing agent in the payment chain.
	DebtorAgentAccount *CashAccount16 `xml:"DbtrAgtAcct,omitempty"`

	// Ultimate party that owes an amount of money to the (ultimate) creditor.
	UltimateDebtor *PartyIdentification32 `xml:"UltmtDbtr,omitempty"`

	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer *ChargeBearerType1Code `xml:"ChrgBr,omitempty"`

	// Account used to process charges associated with a transaction.
	//
	// Usage: Charges account should be used when charges have to be booked to an account different from the account identified in debtor's account.
	ChargesAccount *CashAccount16 `xml:"ChrgsAcct,omitempty"`

	// Agent that services a charges account.
	//
	// Usage: Charges account agent should only be used when the charges account agent is different from the debtor agent.
	ChargesAccountAgent *BranchAndFinancialInstitutionIdentification4 `xml:"ChrgsAcctAgt,omitempty"`

	// Set of elements used to provide information on the individual transaction(s) included in the message.
	CreditTransferTransactionInformation []*CreditTransferTransactionInformation10 `xml:"CdtTrfTxInf"`
}

func (p *PaymentInstructionInformation3) SetPaymentInformationIdentification(value string) {
	p.PaymentInformationIdentification = (*Max35Text)(&value)
}

func (p *PaymentInstructionInformation3) SetPaymentMethod(value string) {
	p.PaymentMethod = (*PaymentMethod3Code)(&value)
}

func (p *PaymentInstructionInformation3) SetBatchBooking(value string) {
	p.BatchBooking = (*BatchBookingIndicator)(&value)
}

func (p *PaymentInstructionInformation3) SetNumberOfTransactions(value string) {
	p.NumberOfTransactions = (*Max15NumericText)(&value)
}

func (p *PaymentInstructionInformation3) SetControlSum(value string) {
	p.ControlSum = (*DecimalNumber)(&value)
}

func (p *PaymentInstructionInformation3) AddPaymentTypeInformation() *PaymentTypeInformation19 {
	p.PaymentTypeInformation = new(PaymentTypeInformation19)
	return p.PaymentTypeInformation
}

func (p *PaymentInstructionInformation3) SetRequestedExecutionDate(value string) {
	p.RequestedExecutionDate = (*ISODate)(&value)
}

func (p *PaymentInstructionInformation3) SetPoolingAdjustmentDate(value string) {
	p.PoolingAdjustmentDate = (*ISODate)(&value)
}

func (p *PaymentInstructionInformation3) AddDebtor() *PartyIdentification32 {
	p.Debtor = new(PartyIdentification32)
	return p.Debtor
}

func (p *PaymentInstructionInformation3) AddDebtorAccount() *CashAccount16 {
	p.DebtorAccount = new(CashAccount16)
	return p.DebtorAccount
}

func (p *PaymentInstructionInformation3) AddDebtorAgent() *BranchAndFinancialInstitutionIdentification4 {
	p.DebtorAgent = new(BranchAndFinancialInstitutionIdentification4)
	return p.DebtorAgent
}

func (p *PaymentInstructionInformation3) AddDebtorAgentAccount() *CashAccount16 {
	p.DebtorAgentAccount = new(CashAccount16)
	return p.DebtorAgentAccount
}

func (p *PaymentInstructionInformation3) AddUltimateDebtor() *PartyIdentification32 {
	p.UltimateDebtor = new(PartyIdentification32)
	return p.UltimateDebtor
}

func (p *PaymentInstructionInformation3) SetChargeBearer(value string) {
	p.ChargeBearer = (*ChargeBearerType1Code)(&value)
}

func (p *PaymentInstructionInformation3) AddChargesAccount() *CashAccount16 {
	p.ChargesAccount = new(CashAccount16)
	return p.ChargesAccount
}

func (p *PaymentInstructionInformation3) AddChargesAccountAgent() *BranchAndFinancialInstitutionIdentification4 {
	p.ChargesAccountAgent = new(BranchAndFinancialInstitutionIdentification4)
	return p.ChargesAccountAgent
}

func (p *PaymentInstructionInformation3) AddCreditTransferTransactionInformation() *CreditTransferTransactionInformation10 {
	newValue := new(CreditTransferTransactionInformation10)
	p.CreditTransferTransactionInformation = append(p.CreditTransferTransactionInformation, newValue)
	return newValue
}

// Set of characteristics that apply to the credit side of the payment transactions included in the direct debit initiation.
type PaymentInstructionInformation4 struct {

	// Unique identification, as assigned by a sending party, to unambiguously identify the payment information group within the message.
	PaymentInformationIdentification *Max35Text `xml:"PmtInfId"`

	// Specifies the means of payment that will be used to move the amount of money.
	PaymentMethod *PaymentMethod2Code `xml:"PmtMtd"`

	// Identifies whether a single entry per individual transaction or a batch entry for the sum of the amounts of all transactions within the group of a message is requested.
	// Usage: Batch booking is used to request and not order a possible batch booking.
	BatchBooking *BatchBookingIndicator `xml:"BtchBookg,omitempty"`

	// Number of individual transactions contained in the payment information group.
	NumberOfTransactions *Max15NumericText `xml:"NbOfTxs,omitempty"`

	// Total of all individual amounts included in the group, irrespective of currencies.
	ControlSum *DecimalNumber `xml:"CtrlSum,omitempty"`

	// Set of elements used to further specify the type of transaction.
	PaymentTypeInformation *PaymentTypeInformation20 `xml:"PmtTpInf,omitempty"`

	// Date and time at which the creditor requests that the amount of money is to be collected from the debtor.
	RequestedCollectionDate *ISODate `xml:"ReqdColltnDt"`

	// Party to which an amount of money is due.
	Creditor *PartyIdentification32 `xml:"Cdtr"`

	// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
	CreditorAccount *CashAccount16 `xml:"CdtrAcct"`

	// Financial institution servicing an account for the creditor.
	CreditorAgent *BranchAndFinancialInstitutionIdentification4 `xml:"CdtrAgt"`

	// Unambiguous identification of the account of the creditor agent at its servicing agent in the payment chain.
	CreditorAgentAccount *CashAccount16 `xml:"CdtrAgtAcct,omitempty"`

	// Ultimate party to which an amount of money is due.
	UltimateCreditor *PartyIdentification32 `xml:"UltmtCdtr,omitempty"`

	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer *ChargeBearerType1Code `xml:"ChrgBr,omitempty"`

	// Account used to process charges associated with a transaction.
	//
	// Usage: Charges account should be used when charges have to be booked to an account different from the account identified in debtor's account.
	ChargesAccount *CashAccount16 `xml:"ChrgsAcct,omitempty"`

	// Agent that services a charges account.
	//
	// Usage: Charges account agent should only be used when the charges account agent is different from the creditor agent.
	ChargesAccountAgent *BranchAndFinancialInstitutionIdentification4 `xml:"ChrgsAcctAgt,omitempty"`

	// Credit party that signs the mandate.
	CreditorSchemeIdentification *PartyIdentification32 `xml:"CdtrSchmeId,omitempty"`

	// Set of elements used to provide information on the individual transaction(s) included in the message.
	DirectDebitTransactionInformation []*DirectDebitTransactionInformation9 `xml:"DrctDbtTxInf"`
}

func (p *PaymentInstructionInformation4) SetPaymentInformationIdentification(value string) {
	p.PaymentInformationIdentification = (*Max35Text)(&value)
}

func (p *PaymentInstructionInformation4) SetPaymentMethod(value string) {
	p.PaymentMethod = (*PaymentMethod2Code)(&value)
}

func (p *PaymentInstructionInformation4) SetBatchBooking(value string) {
	p.BatchBooking = (*BatchBookingIndicator)(&value)
}

func (p *PaymentInstructionInformation4) SetNumberOfTransactions(value string) {
	p.NumberOfTransactions = (*Max15NumericText)(&value)
}

func (p *PaymentInstructionInformation4) SetControlSum(value string) {
	p.ControlSum = (*DecimalNumber)(&value)
}

func (p *PaymentInstructionInformation4) AddPaymentTypeInformation() *PaymentTypeInformation20 {
	p.PaymentTypeInformation = new(PaymentTypeInformation20)
	return p.PaymentTypeInformation
}

func (p *PaymentInstructionInformation4) SetRequestedCollectionDate(value string) {
	p.RequestedCollectionDate = (*ISODate)(&value)
}

func (p *PaymentInstructionInformation4) AddCreditor() *PartyIdentification32 {
	p.Creditor = new(PartyIdentification32)
	return p.Creditor
}

func (p *PaymentInstructionInformation4) AddCreditorAccount() *CashAccount16 {
	p.CreditorAccount = new(CashAccount16)
	return p.CreditorAccount
}

func (p *PaymentInstructionInformation4) AddCreditorAgent() *BranchAndFinancialInstitutionIdentification4 {
	p.CreditorAgent = new(BranchAndFinancialInstitutionIdentification4)
	return p.CreditorAgent
}

func (p *PaymentInstructionInformation4) AddCreditorAgentAccount() *CashAccount16 {
	p.CreditorAgentAccount = new(CashAccount16)
	return p.CreditorAgentAccount
}

func (p *PaymentInstructionInformation4) AddUltimateCreditor() *PartyIdentification32 {
	p.UltimateCreditor = new(PartyIdentification32)
	return p.UltimateCreditor
}

func (p *PaymentInstructionInformation4) SetChargeBearer(value string) {
	p.ChargeBearer = (*ChargeBearerType1Code)(&value)
}

func (p *PaymentInstructionInformation4) AddChargesAccount() *CashAccount16 {
	p.ChargesAccount = new(CashAccount16)
	return p.ChargesAccount
}

func (p *PaymentInstructionInformation4) AddChargesAccountAgent() *BranchAndFinancialInstitutionIdentification4 {
	p.ChargesAccountAgent = new(BranchAndFinancialInstitutionIdentification4)
	return p.ChargesAccountAgent
}

func (p *PaymentInstructionInformation4) AddCreditorSchemeIdentification() *PartyIdentification32 {
	p.CreditorSchemeIdentification = new(PartyIdentification32)
	return p.CreditorSchemeIdentification
}

func (p *PaymentInstructionInformation4) AddDirectDebitTransactionInformation() *DirectDebitTransactionInformation9 {
	newValue := new(DirectDebitTransactionInformation9)
	p.DirectDebitTransactionInformation = append(p.DirectDebitTransactionInformation, newValue)
	return newValue
}
