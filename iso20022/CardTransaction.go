package iso20022

// Card transaction details.
type CardTransaction1 struct {

	// Electronic money product that provides the cardholder with a portable and specialised computer device, which typically contains a microprocessor.
	Card *PaymentCard4 `xml:"Card,omitempty"`

	// Physical or logical card payment terminal containing software and hardware components.
	POI *PointOfInteraction1 `xml:"POI,omitempty"`

	// Card transaction details, which can be either globalised by the acquirer or individual transaction.
	Transaction *CardTransaction1Choice `xml:"Tx,omitempty"`
}

func (c *CardTransaction1) AddCard() *PaymentCard4 {
	c.Card = new(PaymentCard4)
	return c.Card
}

func (c *CardTransaction1) AddPOI() *PointOfInteraction1 {
	c.POI = new(PointOfInteraction1)
	return c.POI
}

func (c *CardTransaction1) AddTransaction() *CardTransaction1Choice {
	c.Transaction = new(CardTransaction1Choice)
	return c.Transaction
}

// Card transaction for which the authorisation has been requested.
type CardTransaction10 struct {

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date when the settlement is expected.
	InterBankSettlementDate *ISODate `xml:"IntrBkSttlmDt,omitempty"`

	// Date and time of the transaction.
	InitiatorTransactionDateTime *ISODateTime `xml:"InitrTxDtTm"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Totals of the reconciliation.
	ReconciliationTotals *TransactionTotals4 `xml:"RcncltnTtls,omitempty"`

	// Net value of all gross amounts.
	AmountNetReconciliation *AmountAndDirection41 `xml:"AmtNetRcncltn,omitempty"`

	// Response to the reconciliation.
	TransactionResponse *ResponseType2 `xml:"TxRspn"`
}

func (c *CardTransaction10) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction10) SetInterBankSettlementDate(value string) {
	c.InterBankSettlementDate = (*ISODate)(&value)
}

func (c *CardTransaction10) SetInitiatorTransactionDateTime(value string) {
	c.InitiatorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction10) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction10) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction10) AddReconciliationTotals() *TransactionTotals4 {
	c.ReconciliationTotals = new(TransactionTotals4)
	return c.ReconciliationTotals
}

func (c *CardTransaction10) AddAmountNetReconciliation() *AmountAndDirection41 {
	c.AmountNetReconciliation = new(AmountAndDirection41)
	return c.AmountNetReconciliation
}

func (c *CardTransaction10) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Network management transaction.
type CardTransaction11 struct {

	// Type of network management service (correspond to the ISO 8583 field 24)
	NetworkManagementType *CardServiceType2Code `xml:"NtwkMgmtTp"`

	// Number of messages in the store and forward queue.
	NumberOfMessages *Number `xml:"NbOfMsgs,omitempty"`

	// Maximum number of messages in the store and forward queue.
	MaximumNumberOfMessages *Number `xml:"MaxNbOfMsgs,omitempty"`

	// Date and time of the transaction.
	InitiatorDateTime *ISODateTime `xml:"InitrDtTm,omitempty"`

	// Response to the network management request.
	TransactionResponse *ResponseType2 `xml:"TxRspn,omitempty"`
}

func (c *CardTransaction11) SetNetworkManagementType(value string) {
	c.NetworkManagementType = (*CardServiceType2Code)(&value)
}

func (c *CardTransaction11) SetNumberOfMessages(value string) {
	c.NumberOfMessages = (*Number)(&value)
}

func (c *CardTransaction11) SetMaximumNumberOfMessages(value string) {
	c.MaximumNumberOfMessages = (*Number)(&value)
}

func (c *CardTransaction11) SetInitiatorDateTime(value string) {
	c.InitiatorDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction11) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Network management transaction.
type CardTransaction12 struct {

	// Type of network management service (correspond to the ISO 8583 field 24)
	NetworkManagementType *CardServiceType2Code `xml:"NtwkMgmtTp"`

	// Date and time of the transaction.
	InitiatorDateTime *ISODateTime `xml:"InitrDtTm,omitempty"`

	// Number of messages in the store and forward queue.
	NumberOfMessages *Number `xml:"NbOfMsgs,omitempty"`

	// Maximum number of messages in the store and forward queue.
	MaximumNumberOfMessages *Number `xml:"MaxNbOfMsgs,omitempty"`

	// Response to the network management request.
	TransactionResponse *ResponseType2 `xml:"TxRspn"`
}

func (c *CardTransaction12) SetNetworkManagementType(value string) {
	c.NetworkManagementType = (*CardServiceType2Code)(&value)
}

func (c *CardTransaction12) SetInitiatorDateTime(value string) {
	c.InitiatorDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction12) SetNumberOfMessages(value string) {
	c.NumberOfMessages = (*Number)(&value)
}

func (c *CardTransaction12) SetMaximumNumberOfMessages(value string) {
	c.MaximumNumberOfMessages = (*Number)(&value)
}

func (c *CardTransaction12) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Key exchange transaction.
type CardTransaction13 struct {

	// Type of key exchange.
	KeyExchangeType *CardServiceType3Code `xml:"KeyXchgTp"`

	// Date and time of the transaction.
	InitiatorDateTime *ISODateTime `xml:"InitrDtTm"`

	// Key that must be created and sent in the response, or that must be verified..
	RequestedKey []*KEKIdentifier3 `xml:"ReqdKey,omitempty"`

	// Created key to be stored.
	Key []*CryptographicKey6 `xml:"Key,omitempty"`

	// Response to the key exchange request.
	TransactionResponse *ResponseType2 `xml:"TxRspn,omitempty"`
}

func (c *CardTransaction13) SetKeyExchangeType(value string) {
	c.KeyExchangeType = (*CardServiceType3Code)(&value)
}

func (c *CardTransaction13) SetInitiatorDateTime(value string) {
	c.InitiatorDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction13) AddRequestedKey() *KEKIdentifier3 {
	newValue := new(KEKIdentifier3)
	c.RequestedKey = append(c.RequestedKey, newValue)
	return newValue
}

func (c *CardTransaction13) AddKey() *CryptographicKey6 {
	newValue := new(CryptographicKey6)
	c.Key = append(c.Key, newValue)
	return newValue
}

func (c *CardTransaction13) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Key exchange transaction.
type CardTransaction14 struct {

	// Type of key exchange.
	KeyExchangeType *CardServiceType3Code `xml:"KeyXchgTp"`

	// Date and time of the transaction.
	InitiatorDateTime *ISODateTime `xml:"InitrDtTm"`

	// Key that has been verified.
	KeyVerification []*KEKIdentifier3 `xml:"KeyVrfctn,omitempty"`

	// Created key to be stored.
	Key []*CryptographicKey6 `xml:"Key,omitempty"`

	// Response to the key exchange request.
	TransactionResponse *ResponseType2 `xml:"TxRspn"`
}

func (c *CardTransaction14) SetKeyExchangeType(value string) {
	c.KeyExchangeType = (*CardServiceType3Code)(&value)
}

func (c *CardTransaction14) SetInitiatorDateTime(value string) {
	c.InitiatorDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction14) AddKeyVerification() *KEKIdentifier3 {
	newValue := new(KEKIdentifier3)
	c.KeyVerification = append(c.KeyVerification, newValue)
	return newValue
}

func (c *CardTransaction14) AddKey() *CryptographicKey6 {
	newValue := new(CryptographicKey6)
	c.Key = append(c.Key, newValue)
	return newValue
}

func (c *CardTransaction14) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Card transaction for which the authorisation is requested.
type CardTransaction15 struct {

	// Type of transaction being undertaken for the main service.
	// It correspond partially to the ISO 8583 field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Service in addition to the main service.
	// It correspond partially to the ISO 8583:2003 field number 22-3.
	AdditionalService []*CardPaymentServiceType8Code `xml:"AddtlSvc,omitempty"`

	// Additional attribute of the service type.
	// It correspond partially to the ISO 8583:2003 field number 22-3.
	ServiceAttribute *CardPaymentServiceType3Code `xml:"SvcAttr,omitempty"`

	// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
	// It correspond to the ISO 8583 field number 18 for the version 87, field numbers 18 and 26 for the version 93, and field number 26 for the version 2003.
	MerchantCategoryCode *Min3Max4NumericText `xml:"MrchntCtgyCd,omitempty"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583 field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Unique transaction identification generated by the acceptor or the acquirer transported unchanged by the acquirer from the card acceptor to the issuer. It is used to assist locating the original source information. Eventually it could be included in the cardholder statement. It corresponds to ISO 8583, field 37 and CAPE data element TransactionIdentification/TransactionReference.
	AcceptorTransactionIdentification *Max35Text `xml:"AccptrTxId"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003, field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Identification of the original transaction.
	// It corresponds to ISO 8583 field number 90 for the version 87, and field number 56 for the other versions.
	OriginalTransaction *CardTransaction3 `xml:"OrgnlTx,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail1 `xml:"TxDtls"`

	// Outcome of the authorisation.
	AuthorisationResult *AuthorisationResult7 `xml:"AuthstnRslt,omitempty"`
}

func (c *CardTransaction15) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction15) AddAdditionalService(value string) {
	c.AdditionalService = append(c.AdditionalService, (*CardPaymentServiceType8Code)(&value))
}

func (c *CardTransaction15) SetServiceAttribute(value string) {
	c.ServiceAttribute = (*CardPaymentServiceType3Code)(&value)
}

func (c *CardTransaction15) SetMerchantCategoryCode(value string) {
	c.MerchantCategoryCode = (*Min3Max4NumericText)(&value)
}

func (c *CardTransaction15) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction15) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction15) SetAcceptorTransactionIdentification(value string) {
	c.AcceptorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction15) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction15) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction15) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction15) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction15) AddOriginalTransaction() *CardTransaction3 {
	c.OriginalTransaction = new(CardTransaction3)
	return c.OriginalTransaction
}

func (c *CardTransaction15) AddTransactionDetails() *CardTransactionDetail1 {
	c.TransactionDetails = new(CardTransactionDetail1)
	return c.TransactionDetails
}

func (c *CardTransaction15) AddAuthorisationResult() *AuthorisationResult7 {
	c.AuthorisationResult = new(AuthorisationResult7)
	return c.AuthorisationResult
}

// Card transaction details.
type CardTransaction2 struct {

	// Electronic money product that provides the cardholder with a portable and specialised computer device, which typically contains a microprocessor.
	Card *PaymentCard4 `xml:"Card,omitempty"`

	// Physical or logical card payment terminal containing software and hardware components.
	POI *PointOfInteraction1 `xml:"POI,omitempty"`

	// Card transaction details, which can be either globalised by the acquirer or individual transaction.
	Transaction *CardTransaction2Choice `xml:"Tx,omitempty"`

	// Prepaid account for the transfer or loading of an amount of money.
	PrePaidAccount *CashAccount24 `xml:"PrePdAcct,omitempty"`
}

func (c *CardTransaction2) AddCard() *PaymentCard4 {
	c.Card = new(PaymentCard4)
	return c.Card
}

func (c *CardTransaction2) AddPOI() *PointOfInteraction1 {
	c.POI = new(PointOfInteraction1)
	return c.POI
}

func (c *CardTransaction2) AddTransaction() *CardTransaction2Choice {
	c.Transaction = new(CardTransaction2Choice)
	return c.Transaction
}

func (c *CardTransaction2) AddPrePaidAccount() *CashAccount24 {
	c.PrePaidAccount = new(CashAccount24)
	return c.PrePaidAccount
}

// Identification of the original transaction.
// It corresponds to ISO 8583, field number 90 for the version 87, and 56 for the other versions.
type CardTransaction3 struct {

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583 field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Number generated by the transaction of the original transaction.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Identification of the entity, initiator of the transaction.
	InitiatorIdentification *Max35Text `xml:"InitrId"`
}

func (c *CardTransaction3) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction3) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction3) SetInitiatorIdentification(value string) {
	c.InitiatorIdentification = (*Max35Text)(&value)
}

// Card transaction for which the authorisation has been requested.
type CardTransaction4 struct {

	// Type of transaction being undertaken for the main service.
	// It correspond partially to the ISO 8583, field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583, field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003, field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Data supplied by a card issuer in response messages or in issuer generated messages, that the acquirer may be required to be provided in subsequent messages. It corresponds to ISO 8583:93 and 2003 field number 95.
	CardIssuerReferenceData *Max140Text `xml:"CardIssrRefData,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail2 `xml:"TxDtls"`

	// Outcome of the authorisation.
	AuthorisationResult *AuthorisationResult8 `xml:"AuthstnRslt,omitempty"`
}

func (c *CardTransaction4) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction4) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction4) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction4) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction4) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction4) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction4) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction4) SetCardIssuerReferenceData(value string) {
	c.CardIssuerReferenceData = (*Max140Text)(&value)
}

func (c *CardTransaction4) AddTransactionDetails() *CardTransactionDetail2 {
	c.TransactionDetails = new(CardTransactionDetail2)
	return c.TransactionDetails
}

func (c *CardTransaction4) AddAuthorisationResult() *AuthorisationResult8 {
	c.AuthorisationResult = new(AuthorisationResult8)
	return c.AuthorisationResult
}

// Card transaction for which the financial authorisation is requested.
type CardTransaction5 struct {

	// Type of transaction being undertaken for the main service.
	// It correspond partially to the ISO 8583 field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Service in addition to the main service.
	// It correspond partially to the ISO 8583:2003 field number 22-3.
	AdditionalService []*CardPaymentServiceType8Code `xml:"AddtlSvc,omitempty"`

	// Additional attribute of the service type.
	// It correspond partially to the ISO 8583:2003 field number 22-3.
	ServiceAttribute *CardPaymentServiceType3Code `xml:"SvcAttr,omitempty"`

	// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
	// It correspond to the ISO 8583 field number 18 for the version 87, field numbers 18 and 26 for the version 93, and field number 26 for the version 2003.
	MerchantCategoryCode *Min3Max4NumericText `xml:"MrchntCtgyCd,omitempty"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583 field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Unique transaction identification generated by the acceptor or the acquirer transported unchanged by the acquirer from the card acceptor to the issuer. It is used to assist locating the original source information. Eventually it could be included in the cardholder statement. It corresponds to ISO 8583, field 37 and CAPE data element TransactionIdentification/TransactionReference.
	AcceptorTransactionIdentification *Max35Text `xml:"AccptrTxId"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Data supplied by an acquirer at clearing time to assist in identifying the original transaction in subsequent messages, for example when researching retrievals and chargebacks. It corresponds to ISO 8583:2003 field number 31, acquirer reference number.
	AcquirerTransactionReference *Max35NumericText `xml:"AcqrrTxRef,omitempty"`

	// Data supplied by a card issuer in response messages or in issuer generated messages, that the acquirer may be required to be provided in subsequent messages. It corresponds to ISO 8583:93 and 2003 field number 95.
	CardIssuerReferenceData *Max140Text `xml:"CardIssrRefData,omitempty"`

	// Identification of the original transaction.
	// It corresponds to ISO 8583, field number 90 for the version 87, and 56 for the other versions.
	OriginalTransaction *CardTransaction3 `xml:"OrgnlTx,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail3 `xml:"TxDtls"`

	// Outcome of the authorisation.
	AuthorisationResult *AuthorisationResult7 `xml:"AuthstnRslt,omitempty"`
}

func (c *CardTransaction5) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction5) AddAdditionalService(value string) {
	c.AdditionalService = append(c.AdditionalService, (*CardPaymentServiceType8Code)(&value))
}

func (c *CardTransaction5) SetServiceAttribute(value string) {
	c.ServiceAttribute = (*CardPaymentServiceType3Code)(&value)
}

func (c *CardTransaction5) SetMerchantCategoryCode(value string) {
	c.MerchantCategoryCode = (*Min3Max4NumericText)(&value)
}

func (c *CardTransaction5) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction5) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction5) SetAcceptorTransactionIdentification(value string) {
	c.AcceptorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction5) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction5) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction5) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction5) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction5) SetAcquirerTransactionReference(value string) {
	c.AcquirerTransactionReference = (*Max35NumericText)(&value)
}

func (c *CardTransaction5) SetCardIssuerReferenceData(value string) {
	c.CardIssuerReferenceData = (*Max140Text)(&value)
}

func (c *CardTransaction5) AddOriginalTransaction() *CardTransaction3 {
	c.OriginalTransaction = new(CardTransaction3)
	return c.OriginalTransaction
}

func (c *CardTransaction5) AddTransactionDetails() *CardTransactionDetail3 {
	c.TransactionDetails = new(CardTransactionDetail3)
	return c.TransactionDetails
}

func (c *CardTransaction5) AddAuthorisationResult() *AuthorisationResult7 {
	c.AuthorisationResult = new(AuthorisationResult7)
	return c.AuthorisationResult
}

// Card transaction for which the financial authorisation has been requested.
type CardTransaction6 struct {

	// Type of transaction being undertaken for the main service.
	// It correspond partially to the ISO 8583, field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583, field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003, field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Data supplied by a card issuer in response messages or in issuer generated messages, that the acquirer may be required to be provided in subsequent messages. It corresponds to ISO 8583:93 and 2003 field number 95.
	CardIssuerReferenceData *Max140Text `xml:"CardIssrRefData,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail4 `xml:"TxDtls"`

	// Outcome of the authorisation.
	AuthorisationResult *AuthorisationResult8 `xml:"AuthstnRslt,omitempty"`
}

func (c *CardTransaction6) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction6) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction6) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction6) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction6) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction6) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction6) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction6) SetCardIssuerReferenceData(value string) {
	c.CardIssuerReferenceData = (*Max140Text)(&value)
}

func (c *CardTransaction6) AddTransactionDetails() *CardTransactionDetail4 {
	c.TransactionDetails = new(CardTransactionDetail4)
	return c.TransactionDetails
}

func (c *CardTransaction6) AddAuthorisationResult() *AuthorisationResult8 {
	c.AuthorisationResult = new(AuthorisationResult8)
	return c.AuthorisationResult
}

// Reversal card transaction.
type CardTransaction7 struct {

	// TTransaction type of the transaction to be reversed.
	// It correspond partially to the ISO 8583, field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer.
	// It correspond to the ISO 8583 field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Unique transaction identification generated by the acceptor or the acquirer transported unchanged by the acquirer from the card acceptor to the issuer. It is used to assist locating the original source information. Eventually it could be included in the cardholder statement. It corresponds to ISO 8583, field 37 and CAPE data element TransactionIdentification/TransactionReference.
	AcceptorTransactionIdentification *Max35Text `xml:"AccptrTxId"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Data supplied by an acquirer at clearing time to assist in identifying the original transaction in subsequent messages, for example when researching retrievals and chargebacks. It corresponds to ISO 8583:2003 field number 31, acquirer reference number.
	AcquirerTransactionReference *Max35NumericText `xml:"AcqrrTxRef,omitempty"`

	// Data supplied by a card issuer in response messages or in issuer generated messages, that the acquirer may be required to be provided in subsequent messages. It corresponds to ISO 8583:93 and 2003 field number 95.
	CardIssuerReferenceData *Max140Text `xml:"CardIssrRefData,omitempty"`

	// Identification of the original transaction.
	// It corresponds to ISO 8583 field number 90 for the version 87, and field number 56 for the other versions.
	OriginalTransaction *CardTransaction3 `xml:"OrgnlTx,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail5 `xml:"TxDtls"`

	// Response to the reversal.
	TransactionResponse *ResponseType2 `xml:"TxRspn,omitempty"`
}

func (c *CardTransaction7) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction7) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction7) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction7) SetAcceptorTransactionIdentification(value string) {
	c.AcceptorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction7) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction7) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction7) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction7) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction7) SetAcquirerTransactionReference(value string) {
	c.AcquirerTransactionReference = (*Max35NumericText)(&value)
}

func (c *CardTransaction7) SetCardIssuerReferenceData(value string) {
	c.CardIssuerReferenceData = (*Max140Text)(&value)
}

func (c *CardTransaction7) AddOriginalTransaction() *CardTransaction3 {
	c.OriginalTransaction = new(CardTransaction3)
	return c.OriginalTransaction
}

func (c *CardTransaction7) AddTransactionDetails() *CardTransactionDetail5 {
	c.TransactionDetails = new(CardTransactionDetail5)
	return c.TransactionDetails
}

func (c *CardTransaction7) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Card transaction for which the authorisation has been requested.
type CardTransaction8 struct {

	// Type of transaction being undertaken for the main service.
	// It correspond partially to the ISO 8583, field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583, field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003, field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail6 `xml:"TxDtls"`

	// Response to the reversal.
	TransactionResponse *ResponseType2 `xml:"TxRspn"`
}

func (c *CardTransaction8) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction8) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction8) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction8) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction8) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction8) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction8) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction8) AddTransactionDetails() *CardTransactionDetail6 {
	c.TransactionDetails = new(CardTransactionDetail6)
	return c.TransactionDetails
}

func (c *CardTransaction8) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}

// Card transaction for which the authorisation has been requested.
type CardTransaction9 struct {

	// Type of reconciliation.
	ReconciliationType *CardServiceType1Code `xml:"RcncltnTp,omitempty"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date when the settlement is expected.
	InterBankSettlementDate *ISODate `xml:"IntrBkSttlmDt,omitempty"`

	// Date and time of the transaction.
	InitiatorTransactionDateTime *ISODateTime `xml:"InitrTxDtTm"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Totals of the reconciliation.
	ReconciliationTotals *TransactionTotals4 `xml:"RcncltnTtls,omitempty"`

	// Net value of all gross amounts.
	AmountNetReconciliation *AmountAndDirection41 `xml:"AmtNetRcncltn,omitempty"`

	// Response to the reconciliation.
	TransactionResponse *ResponseType2 `xml:"TxRspn,omitempty"`
}

func (c *CardTransaction9) SetReconciliationType(value string) {
	c.ReconciliationType = (*CardServiceType1Code)(&value)
}

func (c *CardTransaction9) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction9) SetInterBankSettlementDate(value string) {
	c.InterBankSettlementDate = (*ISODate)(&value)
}

func (c *CardTransaction9) SetInitiatorTransactionDateTime(value string) {
	c.InitiatorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction9) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction9) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction9) AddReconciliationTotals() *TransactionTotals4 {
	c.ReconciliationTotals = new(TransactionTotals4)
	return c.ReconciliationTotals
}

func (c *CardTransaction9) AddAmountNetReconciliation() *AmountAndDirection41 {
	c.AmountNetReconciliation = new(AmountAndDirection41)
	return c.AmountNetReconciliation
}

func (c *CardTransaction9) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}
